digraph structs {
node [shape=record];
prepare_epi_wfinputnode [label="{IN}|{ inputnode | utility |  }|{OUT|<outepipe> epi_pe|<outmapspe> maps_pe|<outrefbrain> ref_brain}"];
prepare_epi_wfsplit [label="{IN|<ininfiles> in_files|<inpedir> pe_dir}|{ split | utility |  }|{OUT|<outout> out}"];
prepare_epi_wfmerge_op [label="{IN|<ininfiles> in_files}|{ merge_op | freesurfer |  }|{OUT|<outoutfile> out_file}"];
prepare_epi_wfref_op_wf [label="{IN|<ininputnodeinfile> inputnode.in_file}|{ ref_op_wf |  |  }|{OUT|<outoutputnodeskullstrippedfile> outputnode.skull_stripped_file}"];
prepare_epi_wfop2ref_reg [label="{IN|<infixedimage> fixed_image|<inmovingimage> moving_image}|{ op2ref_reg | ants |  }|{OUT|<outwarpedimage> warped_image}"];
prepare_epi_wfoutputnode [label="{IN|<inmatchedpe> matched_pe|<inopposedpe> opposed_pe}|{ outputnode | utility |  }|{OUT}"];
prepare_epi_wfinputnode:outepipe:e -> prepare_epi_wfsplit:inpedir:w;
prepare_epi_wfinputnode:outmapspe:e -> prepare_epi_wfsplit:ininfiles:w;
prepare_epi_wfinputnode:outrefbrain:e -> prepare_epi_wfop2ref_reg:infixedimage:w;
prepare_epi_wfinputnode:outrefbrain:e -> prepare_epi_wfoutputnode:inmatchedpe:w;
prepare_epi_wfmerge_op:outoutfile:e -> prepare_epi_wfref_op_wf:ininputnodeinfile:w;
prepare_epi_wfop2ref_reg:outwarpedimage:e -> prepare_epi_wfoutputnode:inopposedpe:w;
prepare_epi_wfref_op_wf:outoutputnodeskullstrippedfile:e -> prepare_epi_wfop2ref_reg:inmovingimage:w;
prepare_epi_wfsplit:outout:e -> prepare_epi_wfmerge_op:ininfiles:w;
}